datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("RAILWAY_PGRES") // used for migrations
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String      @id @default(cuid())
  created_at            DateTime    @default(now())
  name                  String?
  email                 String?     @unique
  emailVerified         DateTime?
  image                 String?
  username              String?     @unique
  accounts              Account[]
  sessions              Session[]
  messages              Message[]
  chatrooms             Chatroom[]  @relation("ChatroomMembers")
  banned_from_chatroom  Chatroom[]  @relation("ChatroomBannedMembers")
  whitelisted           Chatroom[]  @relation("ChatroomWhitelistedMembers")
  owned_chatroom        Chatroom?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id           String     @id @default(cuid())
  created_at   DateTime   @default(now())
  content      String
  author       User       @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id    String     
  chatroom     Chatroom   @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)
  chatroom_id  String     
}

model Chatroom {
  id              String      @id @default(cuid())
  created_at      DateTime    @default(now())
  is_public       Boolean     @default(true)
  name            String     
  description     String
  messages        Message[]
  members         User[]      @relation("ChatroomMembers")
  banned_members  User[]      @relation("ChatroomBannedMembers")
  whitelisted     User[]      @relation("ChatroomWhitelistedMembers")
  owner           User        @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id        String      @unique
  invite_link     InviteLink?
}

model InviteLink {
  id            String      @id @default(cuid())
  created_at    DateTime    @default(now())
  value         String      @unique
  chatroom      Chatroom    @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)
  chatroom_id   String      @unique
}