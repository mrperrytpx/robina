import React, { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import Head from "next/head";
import { VscMenu, VscChromeClose, VscBellDot } from "react-icons/vsc";
import { RiChat1Line } from "react-icons/ri";
import { useSession } from "next-auth/react";
import Link from "next/link";
import Image from "next/image";
import { LoadingSpinner } from "../components/LoadingSpinner";
import { MobileMenu } from "../components/MobileMenu";
import { ErrorBoundary } from "../components/ErrorBoundary";
import DefaultPic from "../../public/default.png";
import {
    TChatroomInvites,
    useGetUserPendingInvitesQuery,
} from "../hooks/useGetUserPendingInvitesQuery";
import { Chatroom } from "@prisma/client";
import { pusherClient } from "../lib/pusher";
import { toast } from "react-toastify";
import { useQueryClient } from "@tanstack/react-query";
import NextNProgress from "nextjs-progressbar";

interface ILayoutProps {
    children: React.ReactNode;
}

const Layout = ({ children }: ILayoutProps) => {
    const [isExpanded, setIsExpanded] = useState(false);

    const pathname = usePathname();
    const session = useSession();
    const queryClient = useQueryClient();

    const pendingInvites = useGetUserPendingInvitesQuery();

    useEffect(() => {
        const newInviteHandler = async (data: Chatroom) => {
            toast.success(`You are invited to join ${data.name}!`);
            queryClient.setQueryData(
                ["invites", session.data?.user.id],
                (oldData: Chatroom[] | undefined) => {
                    if (!oldData) return [data];
                    return [...oldData, data];
                }
            );
            queryClient.invalidateQueries(["invites", session.data?.user.id]);
        };

        pusherClient.subscribe(`chat__${session.data?.user.id}__new-invite`);
        pusherClient.bind("new-invite", newInviteHandler);

        return () => {
            pusherClient.unsubscribe(
                `chat__${session.data?.user.id}__new-invite`
            );
            pusherClient.unbind("new-invite", newInviteHandler);
        };
    }, [queryClient, session.data?.user.id]);

    useEffect(() => {
        const banUser = async (data: {
            id: string;
            chatId: string;
            chatroomName: string;
        }) => {
            if (data.id === session.data?.user.id) {
                toast.error(`You got removed from "${data.chatroomName}"!`);
                queryClient.setQueryData(
                    ["chatrooms", session.data?.user.id],
                    (oldData: Chatroom[] | undefined) => {
                        if (!oldData) return;
                        return oldData.filter(
                            (chatroom) => chatroom.id !== data.chatId
                        );
                    }
                );

                [
                    "chatroom",
                    "invite",
                    "banned_members",
                    "chat_invites",
                    "members",
                    "messages",
                ].forEach((query) =>
                    queryClient.removeQueries([query, data.chatId])
                );
            }
        };

        pusherClient.subscribe(`chat__${session.data?.user.id}__ban`);
        pusherClient.bind("ban", banUser);

        return () => {
            pusherClient.unsubscribe(`chat__${session.data?.user.id}__ban`);
            pusherClient.unbind("ban", banUser);
        };
    }, [queryClient, session.data?.user.id]);

    useEffect(() => {
        const revokeInvite = (data: { chatId: string; userId: string }) => {
            queryClient.setQueryData(
                ["invites", session.data?.user.id],
                (oldData: TChatroomInvites | undefined) => {
                    if (!oldData) return;
                    return oldData.filter(
                        (chatroom) => chatroom.id !== data.chatId
                    );
                }
            );
            queryClient.invalidateQueries(["invites", session.data?.user.id]);
        };

        pusherClient.subscribe(`chat__${session.data?.user.id}__revoke-invite`);
        pusherClient.bind("revoke-invite", revokeInvite);

        return () => {
            pusherClient.unsubscribe(
                `chat__${session.data?.user.id}__revoke-invite`
            );
            pusherClient.unbind("revoke-invite", revokeInvite);
        };
    }, [queryClient, session.data?.user.id]);

    useEffect(() => setIsExpanded(false), [pathname]);

    return (
        <>
            <Head>
                <title>Yet another messaging app</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="relative flex min-h-[100svh] flex-col">
                <header className="sticky top-0 z-50 grid min-h-[64px] place-items-center items-center bg-sky-500">
                    <div className="flex w-full items-center justify-between px-4 py-2">
                        <Link href="/" className="text-3xl text-white">
                            LOGO
                        </Link>
                        <div className="flex items-center gap-4">
                            {session.status === "loading" ? (
                                <LoadingSpinner color="white" size={36} />
                            ) : null}
                            {session?.data?.user && (
                                <>
                                    {pendingInvites.data?.length ? (
                                        <Link href="/chats">
                                            <VscBellDot
                                                className="fill-white group-hover:fill-black group-focus:fill-black"
                                                size={28}
                                            />
                                        </Link>
                                    ) : (
                                        <Link
                                            className="group px-1 py-2 text-xl font-bold uppercase text-white"
                                            href="/chats"
                                        >
                                            <RiChat1Line
                                                className="fill-white group-hover:fill-black group-focus:fill-black"
                                                size={28}
                                            />
                                        </Link>
                                    )}
                                    <Link
                                        className="rounded-full border-2 border-sky-500 hover:border-white"
                                        href="/profile"
                                        aria-label="Profile"
                                    >
                                        <Image
                                            className="w-9 rounded-full"
                                            width={100}
                                            height={100}
                                            src={
                                                session?.data.user?.image ||
                                                DefaultPic
                                            }
                                            alt="User's profile"
                                        />
                                    </Link>
                                </>
                            )}
                            <button
                                aria-label="Menu"
                                onClick={() => setIsExpanded((old) => !old)}
                                className="select-none text-3xl sm:hidden"
                                role="button"
                            >
                                {isExpanded ? (
                                    <VscChromeClose fill="white" />
                                ) : (
                                    <VscMenu fill="white" />
                                )}
                            </button>
                        </div>
                    </div>
                    {isExpanded && (
                        <MobileMenu
                            isExpanded={isExpanded}
                            setIsExpanded={setIsExpanded}
                        />
                    )}
                </header>
                <NextNProgress
                    height={2}
                    options={{
                        showSpinner: false,
                        trickle: true,
                    }}
                    color="black"
                    showOnShallow={false}
                />
                <ErrorBoundary>
                    <main className="mx-auto flex min-h-[calc(100svh-64px)] w-full flex-1">
                        {children}
                    </main>
                </ErrorBoundary>
            </div>
        </>
    );
};

export default Layout;
